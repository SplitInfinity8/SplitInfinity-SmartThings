/**
 *  Multi-factor Action
 *
 *  Copyright 2018 SplitInfinity
 *
 *  Built towards automatically unlocking a door on multiple factors for security, IE presence and open garage.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 * Icon List: http://scripts.3dgo.net/smartthings/icons/
 */
definition(
    name: "Multi-factor Action",
    namespace: "SplitInfinity8",
    author: "SplitInfinity8",
    description: "When X within so many minutes and Y within so many minutes do Z.  IE: If Presence arrived within five minutes, and garage opens, open interior lock.",
    category: "My Apps",
    iconUrl: "http://cdn.device-icons.smartthings.com/Transportation/transportation12-icn@2x.png",
    iconX2Url: "http://cdn.device-icons.smartthings.com/Transportation/transportation12-icn@2x.png",
    iconX3Url: "http://cdn.device-icons.smartthings.com/Transportation/transportation12-icn@2x.png")

preferences {
  section("Enable this app?"){
	input "enableApp", "enum", title: "Do you wish to enable this app?", metadata:[values:["Yes", "No"]], required: true, defaultValue: "Yes"
  }

section("Criteria - When this presence sensor is home (within X minutes)"){
      input "presence1", "capability.presenceSensor", title: "Select presence sensor", required: false, multiple: false
      input "presencemin", "decimal", title: "Minutes?", defaultValue: "5", required: true
      //radio button - arrived / left?
  }
  section("Criteria AND - this door / contact sensor opens (within X minutes)"){
      input "contact1", "capability.contactSensor", title: "Select Contact", required: false
      input "contactmin", "decimal", title: "Minutes?", defaultValue: "1", required: true
  }

  section("Criteria AND - this door unlocks (within X minutes)"){
      input "lock1", "capability.lock", title: "Select Lock", required: false
      input "lockmin", "decimal", title: "Minutes?", defaultValue: "1", required: true
      //Add Lock or Unlock radio button?
  }

  section("Set a timer and after this many minutes check for multiple criteria to execute tasks. ??????"){
      //IE: An action trips, wait 30 minutes, and if presence is gone, no motion sensor, and no contact sensor, then close the garage.
      input "timedaction", "decimal", title: "Minutes?", defaultValue: "1", required: true
  }

  //section("Check for both factors for up to this many minutes"){
  // 	input "minutes", "decimal", title: "Minutes?", defaultValue: "1", required: true
  //}

  section("Criteria - Prevent duplicate executions"){
    	input "execTimes", "decimal", title: "Execute an action this many times?", defaultValue: "1"
    	input "limitExecMinutes", "decimal", title: "Within this many minutes?", defaultValue: "5"
  }


// DO THIS
  section("Action - Unlock this lock!"){
      input "actionlock1", "capability.lock", title: "Select Lock", required: false
      //Add Lock or Unlock radio button?
  }
  section("Action - Turn these lights on or off"){
    //Lights / Level / Color / on-off
  }
  section("Action - Only during these hours"){
    //add only when in this mode?
  }
  section("Push notification?"){
        input "sendPushMessage", "enum", title: "Send push notification?", metadata:[values:["Yes", "No"]], required: true, defaultValue: "Yes"
  }

//  section( "Text message?" ) {
//    	input "sendText", "enum", title: "Send text message notification?", metadata:[values:["Yes", "No"]], required: false
//       	input "phoneNumber", "phone", title: "Enter phone number:", required: false
//  }

}

def installed(){
    initialize()
}

def updated(){
    unsubscribe()
    unschedule()
    initialize()
}

def initialize(){
    //log.debug "Settings: ${settings}"
    state.lastExecution = "pending"
    state.contactLastState = "pending"
    state.contactTime = "pending"
    state.lockLastState = "pending"
    state.lockTime = "pending"
    state.presenceLastState = "pending"
    state.presenceTime = "pending"
    subscribe(lock1, "lock", lockHandler, [filterEvents: false])
    subscribe(lock1, "unlock", lockHandler, [filterEvents: false])  
    subscribe(contact1, "contact.open", contactHandler)
    subscribe(contact1, "contact.closed", contactHandler)
    subscribe(presence1, "presence", presenceHandler)
}

//Change to monitor multiple presence sensors?
//    input "people", "capability.presenceSensor", multiple: true
//    for (person in people) {
//        if (person.currentPresence == "present") {
//            //someone is present, so set our result variable to false and terminate the loop.
//            result = false
//            break
//        }
//    }


def unlockDoor(){
	log.debug "About to unlock the door."
	if (lock1.latestValue("lock") == "locked")
    	{
    		log.debug "Unlocking $lock1..."
    		lock1.unlock()
        	log.debug ("Sending Push Notification...")
    		if (sendPushMessage != "No") sendPush("$lock1 unlocked! Multi-factor action.")
    		log.debug("Sending text message...")
		if ((sendText == "Yes") && (phoneNumber != "0")) sendSms(phoneNumber, "$lock1 unlocked! Multi-factor action.")        
        }
	else if (lock1.latestValue("lock") == "unlocked")
    	{
        log.debug "$lock1 was already unlocked..."
        }
}

def lockDoor(){
	if (lock1.latestValue("lock") == "unlocked")
    	{
    		log.debug "Locking $lock1..."
    		lock1.lock()
        	log.debug ("Sending Push Notification...") 
    		if (sendPushMessage != "No") sendPush("$lock1 locked after $contact1 was closed for $minutesLater minute(s)!")
    		log.debug("Sending text message...")
		if ((sendText == "Yes") && (phoneNumber != "0")) sendSms(phoneNumber, "$lock1 locked after $contact1 was closed for $minutesLater minute(s)!")
        }
	else if (lock1.latestValue("lock") == "locked")
    	{
        log.debug "$lock1 was already locked..."
        }
}

//Checking elapsed time on a presence sensor...
//        def threshold = 1000 * 60 * findFalseAlarmThreshold() - 1000
//        def awayLongEnough = people.findAll { person ->
//            def presenceState = person.currentState("presence")
//            def elapsed = now() - presenceState.rawDateCreated.time
//            elapsed >= threshold

//if ((sendText == "Yes") && (phoneNumber != "0")) sendSms(phoneNumber, "$lock1 locked after $contact1 was closed for $minutesLater minute(s)!")
 

/*
    if ((contact1.latestValue("contact") == "open"))
    {
    //if ((contact1.latestValue("contact") == "open") && (evt.value == "locked"))
    //else if ((contact1.latestValue("contact") == "open") && (evt.value == "unlocked"))
        unschedule (lockDoor)
    	log.debug "Door left open, set timer to send a warning!"
        def delay = (openMinutesLater * 60)
        runIn (delay, alertOpenDoor)
    }
    else if ((contact1.latestValue("contact") == "closed") && (evt.value == "locked"))
    {
	//Door already locked, unschedule pending lock.
	unschedule (alertOpenDoor)
        unschedule (lockDoor)
    }   
    else
    {
        log.debug "Problem with $lock1, the lock might be jammed!"
        unschedule (lockDoor)
        unschedule (alertDoorOpen)
    }
*/

def actionLogic(){
    //minSinceLastExec = currentTime - lastExecution
    if(enableApp == "Yes"){
    //AND IF ~execMinutes < minSinceLastExec
        sendPush("action Logic - Contact: $contact1 Last: $state.contactLastState Time: $state.contactTime - $lock1 $state.lockLastState $state.lockTime - $presence1 $state.presenceLastState $state.presenceTime")
        //if all monitored devices are in the correct state and time frame
        //Then do this
            //Set state.lastExecution = current time
    }
}

//****************EXAMPLE CODE TO STORE TO STATE
//   	state.contactTime = ${evt.date.time}
//****************EXAMPLE CODE TO RETRIEVE STATE
//    if(state.doorClosed == null) {

def contactHandler(evt){
    if(evt.value == "closed"){
        //sendPush("contact Closed")
        state.contactLastState = "closed"
        state.contactTime = "test" // ${evt.date.time}
    }
    else if(evt.value == "open"){
        //sendPush("open")
        state.contactLastState = "open"
        state.contactTime = "test" // ${evt.date.time}
    }
    else{
        state.contactLastState = "unknown"
    }
    actionLogic()
    // get the event name, e.g., "switch"
      //log.debug "This event name is ${evt.name}"
    // get the value of this event, e.g., "on" or "off"
      //log.debug "The value of this event is ${evt.value}"
    // get the Date this event happened at
      //log.debug "This event happened at ${evt.date}"
    // did the value of this event change from its previous state?
      //log.debug "The value of this event is different from its previous value: ${evt.isStateChange()}"
}

def lockHandler(evt){
    if(evt.value == "locked"){
        //sendPush("contact Closed")
        state.lockLastState = "locked"
        //state.lockTime = ${evt.date.time}
    }
    else {
        //sendPush("open")
        state.lockLastState = "open"
        //state.lockTime = ${evt.date.time}
    }
    actionLogic()
}

def presenceHandler(evt) {
    //log.debug "presenceHandler called: $evt
    state.presenceTime = evt.rawDateCreated.time
    if(evt.value == "not present"){
	//state.presenceState = presence1.currentState("presence")
	//def elapsed = now() - presenceState.rawDateCreated.time
        state.presenceLastState = "not present"
    }
    else if(evt.value == "present"){
    	//Present - set appropriate states...
	//presenceState = presence1.currentState("presence")
	//def elapsed = now() - presenceState.rawDateCreated.time
	//state.presenceTime = presenceState.rawDateCreated.time
	state.contactLastState = "present"
    }
    else{
      state.contactLastState = "unknown"
    }
    actionLogic()
}

/*
def motionStoppedHandler(evt) {
    log.debug "motionStoppedHandler called: $evt"

    if(state.doorClosed == null) {
          log.debug "state.doorClosed is null, exiting..."
          return
    }

    def motionStopped = ${evt.date.time}
    def elapsed = motionStopped - state.doorClosed
    def threshold = 1000 * seconds
    
    if (elapsed <= threshold) {
    	log.debug "Time between door close and motion stop ($elapsed ms):  turning switch off"
        theswitch.off()
    }
    else {
        // Motion active; just log it and do nothing
        log.debug "Motion is active, do nothing."
    }       
}
*/


/**
****** Program layout - PSEUDO CODE ******
--Monitor (Reverse, happened at least X minutes ago?)
*Presence (within X minutes)
	Monitor presence (arrival) -> trigger handler -> Record time of presence change -> call main logic function
*Contact (within X minutes)
	Monitor contact (garage open) -> trigger handler -> record time of state change -> call main logic function
Lock (within X minutes, code unlock?? - IE Disarm alarm?)
Motion (within X minutes)
Switch (within X minutes)
Timer (Check in 30 minutes and execute if all criteria are met, reset if action / changes.)

if (all selected monitoring sensors, within each of their time frames){
    DO
    	Each selected action:
		Unlock or lock door (If not already unlocked or locked.)
		Turn on lights / or set level / or set color
		Push / Text an alert
}
****** END LAYOUT ******
*/

